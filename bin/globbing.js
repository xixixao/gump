// Generated by CoffeeScript 1.7.1
(function() {
  var BASE_PATH_SEPARATOR, combine, countSubstrings, findBase, findNegative, globStream, gulp, path;

  path = require('path');

  globStream = require('glob-stream');

  combine = require('ordered-read-streams');

  gulp = require('gulp');

  BASE_PATH_SEPARATOR = '|';

  countSubstrings = function(string, substring) {
    var count, pos;
    count = 0;
    pos = string.indexOf(substring);
    while (pos >= 0) {
      count++;
      pos = string.indexOf(substring, pos + 1);
    }
    return count;
  };

  findBase = function(glob) {
    var base, numSubstrings, rest, _ref;
    numSubstrings = countSubstrings(glob, BASE_PATH_SEPARATOR);
    if (numSubstrings > 1) {
      return error("too many base separators");
    } else if (numSubstrings === 1) {
      _ref = glob.split(BASE_PATH_SEPARATOR), base = _ref[0], rest = _ref[1];
      return {
        base: base,
        glob: path.join(base, rest)
      };
    } else {
      return {
        glob: glob
      };
    }
  };

  findNegative = function(glob) {
    var negative, positive;
    if (glob[0] === '!') {
      return {
        negative: glob
      };
    } else if (countSubstrings(glob, '{!') > 0) {
      positive = glob.replace(/\{(\!+)[^\}]+\}/, function(pattern, negators) {
        if (negators.length === 2) {
          return '**';
        } else {
          return '*';
        }
      });
      negative = '!' + glob.replace(/\{\!+([^\}]+)\}/, '{$1}');
      return {
        positive: positive,
        negative: negative
      };
    } else {
      return {
        positive: glob
      };
    }
  };

  exports.globsToStream = function(globs) {
    var base, globsPosNeg, globsPositive, globsWithBase, negatives, positive, streams;
    globsWithBase = globs.map(findBase);
    globsPosNeg = globsWithBase.map(function(_arg) {
      var base, glob, negative, positive, _ref;
      glob = _arg.glob, base = _arg.base;
      _ref = findNegative(glob), positive = _ref.positive, negative = _ref.negative;
      return {
        positive: positive,
        negative: negative,
        base: base
      };
    });
    negatives = globsPosNeg.filter(function(_arg) {
      var negative;
      negative = _arg.negative;
      return negative != null;
    }).map(function(_arg) {
      var negative;
      negative = _arg.negative;
      return negative;
    });
    globsPositive = globsPosNeg.filter(function(_arg) {
      var positive;
      positive = _arg.positive;
      return positive != null;
    });
    streams = (function() {
      var _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = globsPositive.length; _i < _len; _i++) {
        _ref = globsPositive[_i], positive = _ref.positive, base = _ref.base;
        _results.push(globStream.create([positive].concat(negatives), {
          base: base
        }));
      }
      return _results;
    })();
    return combine(streams);
  };

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var Liftoff, argv, chalk, evil, fs, globalCli, interpret, log, semver, spawn, tildify, versionFlag,
    __slice = [].slice;

  fs = require('fs');

  spawn = require('child_process').spawn;

  chalk = require('chalk');

  semver = require('semver');

  Liftoff = require('liftoff');

  tildify = require('tildify');

  interpret = require('interpret');

  argv = require('minimist')(process.argv.slice(2));

  evil = require('eval');

  log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, [chalk.gray('(Gump)')].concat(__slice.call(args)));
  };

  globalCli = require('../package');

  versionFlag = argv.v || argv.version;

  new Liftoff({
    name: 'gump',
    extensions: interpret.jsVariants
  }).launch({
    cwd: argv.cwd,
    configPath: argv.gumpfile
  }, function(env) {
    var gumpInst, gumpfile;
    if (versionFlag) {
      log("CLI version", globalCli.version);
      if (env.modulePackage) {
        log("Local version", env.modulePackage.version);
      }
      process.exit(0);
    }
    if (!env.modulePath) {
      log(chalk.red("Local Gump not found in"), chalk.magenta(tildify(env.cwd)));
      log(chalk.red("Try running: npm install Gump"));
      process.exit(1);
    }
    if (!env.configPath) {
      log(chalk.red("No gumpfile found"));
      process.exit(1);
    }
    if (semver.gt(globalCli.version, env.modulePackage.version)) {
      log(chalk.red("Warning: Gump version mismatch:"));
      log(chalk.red("Global Gump is", globalCli.version));
      log(chalk.red("Local Gump is", env.modulePackage.version));
    }
    if (process.cwd() !== env.cwd) {
      process.chdir(env.cwd);
      log("Working directory changed to", chalk.magenta(tildify(env.cwd)));
    }
    gumpfile = appendGumpCall(fs.readFileSync(env.configPath, 'utf-8'));
    evil(gumpfile);
    if (shouldLog) {
      gutil.log("Using gulpfile", chalk.magenta(tildify(env.configPath)));
    }
    gumpInst = require(env.modulePath);
    return process.nextTick(function() {
      return gumpInst.run.apply(gumpInst, toRun);
    });
  });

}).call(this);
